plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'kr.entree.spigradle' version '2.4.2'
    id 'java'
    id "com.modrinth.minotaur" version "2.+"
    id 'maven-publish'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

group = 'io.github.brawaru'
version = '1.0.0'

repositories {
    mavenCentral()
    spigot()
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name "essentialsx-releases"
        url "https://repo.essentialsx.net/releases/"
    }
}

dependencies {
    compileOnly spigot('1.19.2')
    compileOnly 'net.essentialsx:EssentialsX:2.19.4'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    implementation 'net.kyori:adventure-api:4.11.0'
    implementation 'net.kyori:adventure-platform-bukkit:4.1.2'
    implementation 'net.kyori:adventure-text-minimessage:4.11.0'
}

spigot {
    authors 'Brawaru'
    apiVersion '1.19'
    depends 'Essentials'
    description 'Addon for EssentialsX that adds a configurable delay before activating the AFK status.'
    excludeLibraries '*'
}

def getMrReadme() {
    def readmeLines = rootProject.file('README.md').getText('UTF-8').readLines()
    def readmeContent = ''
    def ignoresContent = false
    for (def line : readmeLines) {
        if (line.startsWith( '<!-- MR-SKIP-START -->')) {
            if (ignoresContent) {
                throw new GradleException('Illegal formatting: unexpected open of skip block')
            }

            ignoresContent = true;
            continue;
        } else if (line.trim() == '<!-- MR-SKIP-END -->') {
            if (!ignoresContent) {
                throw new GradleException('Illegal formatting: unexpected close of skip block')
            }

            ignoresContent = false;
            continue;
        }

        if (!ignoresContent) {
            readmeContent += line + '\n'
        }
    }
    if (ignoresContent) {
        throw new GradleException('Illegal formatting: unclosed skip block')
    }

    return readmeContent
}

task printModrinthReadme {
    description = 'Prints README that will be used on Modrinth'
    doLast {
        print(getMrReadme())
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "aessentialsxafkdelay"
    versionType = "release"
    uploadFile = shadowJar
    gameVersions = ["1.19", "1.19.1", "1.19.2"]
    loaders = ["spigot", "paper", "purpur"]
    dependencies {
        required.project "essentialsx"
    }

    syncBodyFrom = getMrReadme()

    def changeLogFile = rootProject.file('$RELEASE-NOTES.md')
    if (changeLogFile.exists()) {
        changelog = changeLogFile.getText('UTF-8')
    }
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }

    repositories.clear()
}

tasks.publish.finalizedBy(tasks.modrinth)

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

// Always build shaded JAR instead of a normal JAR
jar {
    enabled = false
}

shadowJar {
    archiveClassifier.set(null)
}

tasks.assemble.dependsOn tasks.shadowJar

// Always re-locate dependencies except for those that excluded
task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "OrsVaz9Pgn0FWmc8"
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar